
ADC_Trial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000782  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c6  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ad  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b4  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007f  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000173b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


static inline void initADC0(void)
{
	ADMUX |= (1<<REFS0);
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1) | (1<<ADPS0);
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	83 60       	ori	r24, 0x03	; 3
  92:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); 
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
{
	uint8_t ledValue;
	uint16_t adcValue;
	uint8_t i;
	initADC0();
	DDRB = 0xff;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	84 b9       	out	0x04, r24	; 4
	
	while(1)
	{
		ADCSRA |= (1<<ADSC);
		do{}while((ADCSRA & (1<<ADSC)));
		adcValue = ADC;
  9e:	a8 e7       	ldi	r26, 0x78	; 120
  a0:	b0 e0       	ldi	r27, 0x00	; 0
		ledValue = (adcValue >> 7);
		PORTB = 0;
		for (i=0; i <=ledValue ; i++)
		{
			
			PORTB |= (1<<i);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	70 e0       	ldi	r23, 0x00	; 0
	initADC0();
	DDRB = 0xff;
	
	while(1)
	{
		ADCSRA |= (1<<ADSC);
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 83       	st	Z, r24
		do{}while((ADCSRA & (1<<ADSC)));
  ac:	80 81       	ld	r24, Z
  ae:	86 fd       	sbrc	r24, 6
  b0:	fd cf       	rjmp	.-6      	; 0xac <main+0x2c>
		adcValue = ADC;
  b2:	8d 91       	ld	r24, X+
  b4:	9c 91       	ld	r25, X
  b6:	11 97       	sbiw	r26, 0x01	; 1
		ledValue = (adcValue >> 7);
  b8:	88 0f       	add	r24, r24
  ba:	89 2f       	mov	r24, r25
  bc:	88 1f       	adc	r24, r24
  be:	99 0b       	sbc	r25, r25
  c0:	91 95       	neg	r25
  c2:	48 2f       	mov	r20, r24
		PORTB = 0;
  c4:	15 b8       	out	0x05, r1	; 5
		for (i=0; i <=ledValue ; i++)
  c6:	80 e0       	ldi	r24, 0x00	; 0
		{
			
			PORTB |= (1<<i);
  c8:	95 b1       	in	r25, 0x05	; 5
  ca:	9b 01       	movw	r18, r22
  cc:	08 2e       	mov	r0, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <main+0x54>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <main+0x50>
  d8:	29 2b       	or	r18, r25
  da:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	cf e1       	ldi	r28, 0x1F	; 31
  de:	de e4       	ldi	r29, 0x4E	; 78
  e0:	21 97       	sbiw	r28, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x60>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x66>
  e6:	00 00       	nop
		ADCSRA |= (1<<ADSC);
		do{}while((ADCSRA & (1<<ADSC)));
		adcValue = ADC;
		ledValue = (adcValue >> 7);
		PORTB = 0;
		for (i=0; i <=ledValue ; i++)
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	48 17       	cp	r20, r24
  ec:	68 f7       	brcc	.-38     	; 0xc8 <main+0x48>
  ee:	df e7       	ldi	r29, 0x7F	; 127
  f0:	28 e3       	ldi	r18, 0x38	; 56
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	d1 50       	subi	r29, 0x01	; 1
  f6:	20 40       	sbci	r18, 0x00	; 0
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x74>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7e>
  fe:	00 00       	nop
 100:	d2 cf       	rjmp	.-92     	; 0xa6 <main+0x26>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
