
Control Leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e4  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000728  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000397  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ce  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000271  00000000  00000000  00001bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_4>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  78:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <sendChar>:

void sendChar(uint8_t data)
{
	do 
	{
	} while (!(UCSR0A &(1<<UDRE0)));
  80:	e0 ec       	ldi	r30, 0xC0	; 192
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	95 ff       	sbrs	r25, 5
  88:	fd cf       	rjmp	.-6      	; 0x84 <sendChar+0x4>
	UDR0 = data;
  8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  8e:	08 95       	ret

00000090 <__vector_4>:
	PCMSK1 = 0xff;
	sei();
}

ISR (PCINT1_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
	if (PORTC == (0b01110111))          //w   0b01110111
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	87 37       	cpi	r24, 0x77	; 119
  b6:	71 f4       	brne	.+28     	; 0xd4 <__vector_4+0x44>
	{
		sendChar('w');
  b8:	87 e7       	ldi	r24, 0x77	; 119
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 40 00 	call	0x80	; 0x80 <sendChar>
		LED_PORT = (1<<PINB0) | (1<<PINB1);
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	83 ec       	ldi	r24, 0xC3	; 195
  c6:	99 e0       	ldi	r25, 0x09	; 9
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <__vector_4+0x38>
  cc:	00 c0       	rjmp	.+0      	; 0xce <__vector_4+0x3e>
  ce:	00 00       	nop
		_delay_ms(10);
		PORTC = 0;
  d0:	18 b8       	out	0x08, r1	; 8
  d2:	38 c0       	rjmp	.+112    	; 0x144 <__vector_4+0xb4>
	}
	else if (PORTC == (0b01110011))     // s  0b01110011
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	83 37       	cpi	r24, 0x73	; 115
  d8:	71 f4       	brne	.+28     	; 0xf6 <__vector_4+0x66>
	{
		sendChar('s');
  da:	83 e7       	ldi	r24, 0x73	; 115
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 40 00 	call	0x80	; 0x80 <sendChar>
		LED_PORT = (1<<PINB7) | (1<<PINB6);
  e2:	80 ec       	ldi	r24, 0xC0	; 192
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	83 ec       	ldi	r24, 0xC3	; 195
  e8:	99 e0       	ldi	r25, 0x09	; 9
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <__vector_4+0x5a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <__vector_4+0x60>
  f0:	00 00       	nop
		_delay_ms(10);
		PORTC = 0;
  f2:	18 b8       	out	0x08, r1	; 8
  f4:	27 c0       	rjmp	.+78     	; 0x144 <__vector_4+0xb4>
	}
	else if (PORTC == (0b01100100))    //d   0b01100100
  f6:	88 b1       	in	r24, 0x08	; 8
  f8:	84 36       	cpi	r24, 0x64	; 100
  fa:	71 f4       	brne	.+28     	; 0x118 <__vector_4+0x88>
	{
		sendChar('d');
  fc:	84 e6       	ldi	r24, 0x64	; 100
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 40 00 	call	0x80	; 0x80 <sendChar>
		LED_PORT = (1<<PIND2) | (1<<PIND3);
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	85 b9       	out	0x05, r24	; 5
 108:	83 ec       	ldi	r24, 0xC3	; 195
 10a:	99 e0       	ldi	r25, 0x09	; 9
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <__vector_4+0x7c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <__vector_4+0x82>
 112:	00 00       	nop
		_delay_ms(10);
		PORTC = 0;
 114:	18 b8       	out	0x08, r1	; 8
 116:	16 c0       	rjmp	.+44     	; 0x144 <__vector_4+0xb4>
	}
	else if (PORTC == (0b01100001))    //a   0b01100110
 118:	88 b1       	in	r24, 0x08	; 8
 11a:	81 36       	cpi	r24, 0x61	; 97
 11c:	71 f4       	brne	.+28     	; 0x13a <__vector_4+0xaa>
	{
		sendChar('a');
 11e:	81 e6       	ldi	r24, 0x61	; 97
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 40 00 	call	0x80	; 0x80 <sendChar>
		LED_PORT = (1<<PIND4) | (1<<PIND5);
 126:	80 e3       	ldi	r24, 0x30	; 48
 128:	85 b9       	out	0x05, r24	; 5
 12a:	83 ec       	ldi	r24, 0xC3	; 195
 12c:	99 e0       	ldi	r25, 0x09	; 9
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <__vector_4+0x9e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <__vector_4+0xa4>
 134:	00 00       	nop
		_delay_ms(10);
		PORTC = 0;
 136:	18 b8       	out	0x08, r1	; 8
 138:	05 c0       	rjmp	.+10     	; 0x144 <__vector_4+0xb4>
	}
	else
	{
		sendChar('n');
 13a:	8e e6       	ldi	r24, 0x6E	; 110
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 40 00 	call	0x80	; 0x80 <sendChar>
		PORTC = 0x00;
 142:	18 b8       	out	0x08, r1	; 8
 144:	83 ed       	ldi	r24, 0xD3	; 211
 146:	90 e3       	ldi	r25, 0x30	; 48
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <__vector_4+0xb8>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <__vector_4+0xbe>
 14e:	00 00       	nop
	}
	_delay_ms(50);
}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <main>:


int main(void)
{
	
	LED_DDR  = 0xff;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	84 b9       	out	0x04, r24	; 4
	LED_PORT = 0x00;
 176:	15 b8       	out	0x05, r1	; 5
#include <util/delay.h>


static inline void pi_enable()
{
	PCICR  = (1<<PCIE1);
 178:	92 e0       	ldi	r25, 0x02	; 2
 17a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	PCMSK1 = 0xff;
 17e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	sei();
 182:	78 94       	sei
}


static inline void initUART()
{
	UBRR0H = (BR >> 8);          //SET THE BAUD RATE TO 4800
 184:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = BR;
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);    // ENABLE THE TRANSMITTER AND RECEIVER
 18e:	88 e1       	ldi	r24, 0x18	; 24
 190:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);  // SETTING THE BIT CHARACTER SIZE TO BE 8 AND 1 STOP BIT
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
}


static inline uint8_t receiveChar()
{
	do{}while(!(UCSR0A & (1<<RXC0)));
 19a:	c0 ec       	ldi	r28, 0xC0	; 192
 19c:	d0 e0       	ldi	r29, 0x00	; 0
		return UDR0;
 19e:	0f 2e       	mov	r0, r31
 1a0:	f6 ec       	ldi	r31, 0xC6	; 198
 1a2:	ef 2e       	mov	r14, r31
 1a4:	f1 2c       	mov	r15, r1
 1a6:	f0 2d       	mov	r31, r0
 1a8:	2f e9       	ldi	r18, 0x9F	; 159
 1aa:	86 e8       	ldi	r24, 0x86	; 134
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x3c>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x46>
 1b8:	00 00       	nop
	
	
    while (1) 
    {
		_delay_ms(500);
		PORTB = 0x00;
 1ba:	15 b8       	out	0x05, r1	; 5
}


static inline uint8_t receiveChar()
{
	do{}while(!(UCSR0A & (1<<RXC0)));
 1bc:	88 81       	ld	r24, Y
 1be:	88 23       	and	r24, r24
 1c0:	ec f7       	brge	.-6      	; 0x1bc <main+0x4a>
		return UDR0;
 1c2:	f7 01       	movw	r30, r14
 1c4:	10 81       	ld	r17, Z
    {
		_delay_ms(500);
		PORTB = 0x00;
		char data;
		data = receiveChar();
		sendChar(data);
 1c6:	81 2f       	mov	r24, r17
 1c8:	0e 94 40 00 	call	0x80	; 0x80 <sendChar>
		PORTC = data; 
 1cc:	18 b9       	out	0x08, r17	; 8
			{
				sendChar('n');
				PORTC = 0x00;
			}
		_delay_ms(50);*/
    }
 1ce:	ec cf       	rjmp	.-40     	; 0x1a8 <main+0x36>

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
