
TimerCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000190  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cf  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000760  00000000  00000000  00000be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038a  00000000  00000000  00001343  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f6  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000111  00000000  00000000  00001b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001c5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 35       	cpi	r26, 0x58	; 88
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  8e:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initUSART>:
	}
}

void initTimer (void)
{
	TCCR1B = (1<<CS11) | (1<<CS10);                       //This bit-set sets the prescalar to be 64.
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  9a:	8d e0       	ldi	r24, 0x0D	; 13
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  ac:	08 95       	ret

000000ae <transmitByte>:
  ae:	e0 ec       	ldi	r30, 0xC0	; 192
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	95 ff       	sbrs	r25, 5
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <transmitByte+0x4>
  b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  bc:	08 95       	ret

000000be <receiveByte>:
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 23       	and	r24, r24
  c6:	ec f7       	brge	.-6      	; 0xc2 <receiveByte+0x4>
  c8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  cc:	08 95       	ret

000000ce <printString>:
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	61 f0       	breq	.+24     	; 0xf4 <printString+0x26>
  dc:	8f 01       	movw	r16, r30
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 57 00 	call	0xae	; 0xae <transmitByte>
  e6:	cf 5f       	subi	r28, 0xFF	; 255
  e8:	f8 01       	movw	r30, r16
  ea:	ec 0f       	add	r30, r28
  ec:	f1 1d       	adc	r31, r1
  ee:	80 81       	ld	r24, Z
  f0:	81 11       	cpse	r24, r1
  f2:	f6 cf       	rjmp	.-20     	; 0xe0 <printString+0x12>
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	0f 91       	pop	r16
  fa:	08 95       	ret

000000fc <main>:
int main(void)
{
	char byte;
	uint16_t timerValue;
	
	initUSART();
  fc:	0e 94 4b 00 	call	0x96	; 0x96 <initUSART>
	}
}

void initTimer (void)
{
	TCCR1B = (1<<CS11) | (1<<CS10);                       //This bit-set sets the prescalar to be 64.
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	char byte;
	uint16_t timerValue;
	
	initUSART();
	initTimer();
	DDRB = 0xff;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00;
 10a:	17 b8       	out	0x07, r1	; 7
	PORTC = (1<<PINC5);
 10c:	80 e2       	ldi	r24, 0x20	; 32
 10e:	88 b9       	out	0x08, r24	; 8
	
	
	printString("\r\nReaction Timer:\r\n");
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 67 00 	call	0xce	; 0xce <printString>
	printString("---------------\r\n");
 118:	86 e4       	ldi	r24, 0x46	; 70
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 67 00 	call	0xce	; 0xce <printString>
		PORTB &= ~(1<<PINB0);                         //TURN OFF THE LED INITIALLY
		printString("Let's do it guych...\r\n");
		byte = receiveByte();
		printString("Get ready...\r\n");
		_delay_ms(1000);                   
		PORTB = (1<<PINB0);				   //LIGHT UP THE LED ONCE THE SETUP IS READY TO TAKE THE INPUT FROM THE USER
 120:	ff 24       	eor	r15, r15
 122:	f3 94       	inc	r15
			printString("Cheater\r\n");
			printString("-----------------\r\n");
		}
		else
		{
			TCNT1 = 0;
 124:	04 e8       	ldi	r16, 0x84	; 132
 126:	10 e0       	ldi	r17, 0x00	; 0
	
    
	
    while (1) 
    {
		PORTB &= ~(1<<PINB0);                         //TURN OFF THE LED INITIALLY
 128:	28 98       	cbi	0x05, 0	; 5
		printString("Let's do it guych...\r\n");
 12a:	84 e1       	ldi	r24, 0x14	; 20
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 67 00 	call	0xce	; 0xce <printString>
		byte = receiveByte();
 132:	0e 94 5f 00 	call	0xbe	; 0xbe <receiveByte>
		printString("Get ready...\r\n");
 136:	8b e2       	ldi	r24, 0x2B	; 43
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 67 00 	call	0xce	; 0xce <printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	2f e3       	ldi	r18, 0x3F	; 63
 140:	8d e0       	ldi	r24, 0x0D	; 13
 142:	93 e0       	ldi	r25, 0x03	; 3
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x48>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x52>
 14e:	00 00       	nop
		_delay_ms(1000);                   
		PORTB = (1<<PINB0);				   //LIGHT UP THE LED ONCE THE SETUP IS READY TO TAKE THE INPUT FROM THE USER
 150:	f5 b8       	out	0x05, r15	; 5
		if(!(PINC & (1 << PINC5)))
 152:	35 99       	sbic	0x06, 5	; 6
 154:	09 c0       	rjmp	.+18     	; 0x168 <main+0x6c>
		{
			printString("Cheater\r\n");
 156:	8a e3       	ldi	r24, 0x3A	; 58
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 67 00 	call	0xce	; 0xce <printString>
			printString("-----------------\r\n");
 15e:	84 e4       	ldi	r24, 0x44	; 68
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 67 00 	call	0xce	; 0xce <printString>
 166:	0e c0       	rjmp	.+28     	; 0x184 <main+0x88>
		}
		else
		{
			TCNT1 = 0;
 168:	f8 01       	movw	r30, r16
 16a:	11 82       	std	Z+1, r1	; 0x01
 16c:	10 82       	st	Z, r1
			do 
			{
			} while ((1<<PINC5) & PINC );
 16e:	35 99       	sbic	0x06, 5	; 6
 170:	fe cf       	rjmp	.-4      	; 0x16e <main+0x72>
			timerValue = (TCNT1 >> 4);
 172:	f8 01       	movw	r30, r16
 174:	c0 81       	ld	r28, Z
 176:	d1 81       	ldd	r29, Z+1	; 0x01
 178:	d2 95       	swap	r29
 17a:	c2 95       	swap	r28
 17c:	cf 70       	andi	r28, 0x0F	; 15
 17e:	cd 27       	eor	r28, r29
 180:	df 70       	andi	r29, 0x0F	; 15
 182:	cd 27       	eor	r28, r29
		}
		transmitByte(timerValue);
 184:	ce 01       	movw	r24, r28
 186:	0e 94 57 00 	call	0xae	; 0xae <transmitByte>
		
		
    }
 18a:	ce cf       	rjmp	.-100    	; 0x128 <main+0x2c>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
