
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b0c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ab  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007dd  00000000  00000000  00001ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ab7  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00003168  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ed  00000000  00000000  0000327c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001265  00000000  00000000  00003669  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000048ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  78:	0c 94 84 05 	jmp	0xb08	; 0xb08 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initTimer>:
	else
	{
		PORTB = (1<<PINB3);
	}	
	return  pos;
}
  80:	82 e8       	ldi	r24, 0x82	; 130
  82:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  86:	89 e1       	ldi	r24, 0x19	; 25
  88:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	9e e4       	ldi	r25, 0x4E	; 78
  90:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  94:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
  98:	08 95       	ret

0000009a <initUART>:
  9a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  9e:	8c e0       	ldi	r24, 0x0C	; 12
  a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  b0:	08 95       	ret

000000b2 <tx>:
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	95 ff       	sbrs	r25, 5
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <tx+0x4>
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  c0:	08 95       	ret

000000c2 <rx>:
  c2:	e0 ec       	ldi	r30, 0xC0	; 192
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	ec f7       	brge	.-6      	; 0xc6 <rx+0x4>
  cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d0:	08 95       	ret

000000d2 <main>:

int main(void)
{	
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	2a 97       	sbiw	r28, 0x0a	; 10
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
	int step = 10;
	initTimer();
  e6:	0e 94 40 00 	call	0x80	; 0x80 <initTimer>
	initUART();
  ea:	0e 94 4d 00 	call	0x9a	; 0x9a <initUART>
	int ud = 1500;
	int ud2 = 1500;
	int max = 2500;
	int min = 100;
	uint8_t key;
	DDRB = 0xff;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	84 b9       	out	0x04, r24	; 4
	int step = 10;
	initTimer();
	initUART();
	int lr = 1500;
	int ud = 1500;
	int ud2 = 1500;
  f2:	0f 2e       	mov	r0, r31
  f4:	fc ed       	ldi	r31, 0xDC	; 220
  f6:	af 2e       	mov	r10, r31
  f8:	f5 e0       	ldi	r31, 0x05	; 5
  fa:	bf 2e       	mov	r11, r31
  fc:	f0 2d       	mov	r31, r0
{	
	int step = 10;
	initTimer();
	initUART();
	int lr = 1500;
	int ud = 1500;
  fe:	0c ed       	ldi	r16, 0xDC	; 220
 100:	15 e0       	ldi	r17, 0x05	; 5
int main(void)
{	
	int step = 10;
	initTimer();
	initUART();
	int lr = 1500;
 102:	0f 2e       	mov	r0, r31
 104:	fc ed       	ldi	r31, 0xDC	; 220
 106:	2f 2e       	mov	r2, r31
 108:	f5 e0       	ldi	r31, 0x05	; 5
 10a:	3f 2e       	mov	r3, r31
 10c:	f0 2d       	mov	r31, r0
		
		switch (PORTC)
		{
			case (0b01100001):					//key a is pressed
			{	
				OCR1B = 65000;
 10e:	0f 2e       	mov	r0, r31
 110:	f8 ee       	ldi	r31, 0xE8	; 232
 112:	4f 2e       	mov	r4, r31
 114:	fd ef       	ldi	r31, 0xFD	; 253
 116:	5f 2e       	mov	r5, r31
 118:	f0 2d       	mov	r31, r0
			case(0b01010011):					//CAPITAL S IS PRESSED
			{
				PORTB |= (1<<PINB4);			
				_delay_us(ud2);
				PORTB &= ~(1<<PINB4);
				_delay_us(25000-ud2);
 11a:	0f 2e       	mov	r0, r31
 11c:	f8 ea       	ldi	r31, 0xA8	; 168
 11e:	6f 2e       	mov	r6, r31
 120:	f1 e6       	ldi	r31, 0x61	; 97
 122:	7f 2e       	mov	r7, r31
 124:	f0 2d       	mov	r31, r0
	uint8_t key;
	DDRB = 0xff;
	//DDRC = 0xff;	
    while (1) 
    {
		if(lr < min){lr=100;}
 126:	84 e6       	ldi	r24, 0x64	; 100
 128:	28 16       	cp	r2, r24
 12a:	31 04       	cpc	r3, r1
 12c:	64 f0       	brlt	.+24     	; 0x146 <main+0x74>
 12e:	e5 ec       	ldi	r30, 0xC5	; 197
 130:	2e 16       	cp	r2, r30
 132:	e9 e0       	ldi	r30, 0x09	; 9
 134:	3e 06       	cpc	r3, r30
 136:	64 f0       	brlt	.+24     	; 0x150 <main+0x7e>
 138:	0f 2e       	mov	r0, r31
 13a:	f4 ec       	ldi	r31, 0xC4	; 196
 13c:	2f 2e       	mov	r2, r31
 13e:	f9 e0       	ldi	r31, 0x09	; 9
 140:	3f 2e       	mov	r3, r31
 142:	f0 2d       	mov	r31, r0
 144:	05 c0       	rjmp	.+10     	; 0x150 <main+0x7e>
 146:	0f 2e       	mov	r0, r31
 148:	f4 e6       	ldi	r31, 0x64	; 100
 14a:	2f 2e       	mov	r2, r31
 14c:	31 2c       	mov	r3, r1
 14e:	f0 2d       	mov	r31, r0
		else if (lr>max){lr=2500;}
		
		if (ud < min){ud=100;}
 150:	04 36       	cpi	r16, 0x64	; 100
 152:	11 05       	cpc	r17, r1
 154:	3c f0       	brlt	.+14     	; 0x164 <main+0x92>
 156:	05 3c       	cpi	r16, 0xC5	; 197
 158:	f9 e0       	ldi	r31, 0x09	; 9
 15a:	1f 07       	cpc	r17, r31
 15c:	2c f0       	brlt	.+10     	; 0x168 <main+0x96>
 15e:	04 ec       	ldi	r16, 0xC4	; 196
 160:	19 e0       	ldi	r17, 0x09	; 9
 162:	02 c0       	rjmp	.+4      	; 0x168 <main+0x96>
 164:	04 e6       	ldi	r16, 0x64	; 100
 166:	10 e0       	ldi	r17, 0x00	; 0
		else if (ud > max){ud = 2500;}	
			
		//value = servoControl(value);
		//servoCheck;
		key = rx();
 168:	0e 94 61 00 	call	0xc2	; 0xc2 <rx>
		PORTC = key;
 16c:	88 b9       	out	0x08, r24	; 8
		
		switch (PORTC)
 16e:	98 b1       	in	r25, 0x08	; 8
 170:	91 36       	cpi	r25, 0x61	; 97
 172:	a1 f0       	breq	.+40     	; 0x19c <main+0xca>
 174:	50 f4       	brcc	.+20     	; 0x18a <main+0xb8>
 176:	93 35       	cpi	r25, 0x53	; 83
 178:	09 f4       	brne	.+2      	; 0x17c <main+0xaa>
 17a:	ba c1       	rjmp	.+884    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 17c:	97 35       	cpi	r25, 0x57	; 87
 17e:	09 f4       	brne	.+2      	; 0x182 <main+0xb0>
 180:	77 c0       	rjmp	.+238    	; 0x270 <main+0x19e>
 182:	90 32       	cpi	r25, 0x20	; 32
 184:	09 f0       	breq	.+2      	; 0x188 <main+0xb6>
 186:	f4 c2       	rjmp	.+1512   	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
 188:	57 c0       	rjmp	.+174    	; 0x238 <main+0x166>
 18a:	93 37       	cpi	r25, 0x73	; 115
 18c:	09 f4       	brne	.+2      	; 0x190 <main+0xbe>
 18e:	41 c0       	rjmp	.+130    	; 0x212 <main+0x140>
 190:	97 37       	cpi	r25, 0x77	; 119
 192:	61 f1       	breq	.+88     	; 0x1ec <main+0x11a>
 194:	94 36       	cpi	r25, 0x64	; 100
 196:	09 f0       	breq	.+2      	; 0x19a <main+0xc8>
 198:	eb c2       	rjmp	.+1494   	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
 19a:	14 c0       	rjmp	.+40     	; 0x1c4 <main+0xf2>
		{
			case (0b01100001):					//key a is pressed
			{	
				OCR1B = 65000;
 19c:	ea e8       	ldi	r30, 0x8A	; 138
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	51 82       	std	Z+1, r5	; 0x01
 1a2:	40 82       	st	Z, r4
				tx(key);			
 1a4:	0e 94 59 00 	call	0xb2	; 0xb2 <tx>
				DDRB = (1<<PINB1);				//HORIZONTAL CONTROL SERVO IS CONNECTED TO PIN B1
 1a8:	f2 e0       	ldi	r31, 0x02	; 2
 1aa:	f4 b9       	out	0x04, r31	; 4
				TCNT1 = 0x0000;
 1ac:	e4 e8       	ldi	r30, 0x84	; 132
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	11 82       	std	Z+1, r1	; 0x01
 1b2:	10 82       	st	Z, r1
				OCR1A = lr;					
 1b4:	e8 e8       	ldi	r30, 0x88	; 136
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	31 82       	std	Z+1, r3	; 0x01
 1ba:	20 82       	st	Z, r2
				lr+=step;
 1bc:	fa e0       	ldi	r31, 0x0A	; 10
 1be:	2f 0e       	add	r2, r31
 1c0:	31 1c       	adc	r3, r1
				break;
 1c2:	b1 cf       	rjmp	.-158    	; 0x126 <main+0x54>
			}
			case (0b01100100):					//key d is pressed
			{
				OCR1B = 65000;
 1c4:	ea e8       	ldi	r30, 0x8A	; 138
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	51 82       	std	Z+1, r5	; 0x01
 1ca:	40 82       	st	Z, r4
				tx(key);
 1cc:	0e 94 59 00 	call	0xb2	; 0xb2 <tx>
				DDRB = (1<<PINB1);
 1d0:	f2 e0       	ldi	r31, 0x02	; 2
 1d2:	f4 b9       	out	0x04, r31	; 4
				TCNT1 = 0x0000;
 1d4:	e4 e8       	ldi	r30, 0x84	; 132
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	11 82       	std	Z+1, r1	; 0x01
 1da:	10 82       	st	Z, r1
				OCR1A = lr;
 1dc:	e8 e8       	ldi	r30, 0x88	; 136
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	31 82       	std	Z+1, r3	; 0x01
 1e2:	20 82       	st	Z, r2
				lr -=step;
 1e4:	fa e0       	ldi	r31, 0x0A	; 10
 1e6:	2f 1a       	sub	r2, r31
 1e8:	31 08       	sbc	r3, r1
				break;
 1ea:	9d cf       	rjmp	.-198    	; 0x126 <main+0x54>
			}
			case (0b01110111):					//key w is pressed
			{
				OCR1A = 65000;
 1ec:	e8 e8       	ldi	r30, 0x88	; 136
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	51 82       	std	Z+1, r5	; 0x01
 1f2:	40 82       	st	Z, r4
				tx(key);
 1f4:	0e 94 59 00 	call	0xb2	; 0xb2 <tx>
				DDRB = (1<<PINB2);				//VERTICAL CONTROL SERVO CONNECTED TO PIN B2
 1f8:	f4 e0       	ldi	r31, 0x04	; 4
 1fa:	f4 b9       	out	0x04, r31	; 4
				TCNT1 = 0x0000;
 1fc:	e4 e8       	ldi	r30, 0x84	; 132
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	11 82       	std	Z+1, r1	; 0x01
 202:	10 82       	st	Z, r1
				OCR1B = ud;
 204:	ea e8       	ldi	r30, 0x8A	; 138
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	11 83       	std	Z+1, r17	; 0x01
 20a:	00 83       	st	Z, r16
				ud+=step;
 20c:	06 5f       	subi	r16, 0xF6	; 246
 20e:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
 210:	8a cf       	rjmp	.-236    	; 0x126 <main+0x54>
			}
			case (0b01110011):					//key s is pressed
			{
				OCR1A = 65000;
 212:	e8 e8       	ldi	r30, 0x88	; 136
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	51 82       	std	Z+1, r5	; 0x01
 218:	40 82       	st	Z, r4
				tx(key);
 21a:	0e 94 59 00 	call	0xb2	; 0xb2 <tx>
				DDRB = (1<<PINB2);
 21e:	f4 e0       	ldi	r31, 0x04	; 4
 220:	f4 b9       	out	0x04, r31	; 4
				TCNT1 = 0x0000;
 222:	e4 e8       	ldi	r30, 0x84	; 132
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	11 82       	std	Z+1, r1	; 0x01
 228:	10 82       	st	Z, r1
				OCR1B = ud;
 22a:	ea e8       	ldi	r30, 0x8A	; 138
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	11 83       	std	Z+1, r17	; 0x01
 230:	00 83       	st	Z, r16
				ud -=step;
 232:	0a 50       	subi	r16, 0x0A	; 10
 234:	11 09       	sbc	r17, r1
				break;
 236:	77 cf       	rjmp	.-274    	; 0x126 <main+0x54>
			}
			case (0b00100000):					//SPACE IS PRESSED
			{
				PORTB |= (1<<PINB3);			//FINGER SERVO IS CONNECTED TO PINB3
 238:	2b 9a       	sbi	0x05, 3	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23a:	87 e7       	ldi	r24, 0x77	; 119
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x16c>
				_delay_us(1500);
				PORTB &= ~(1<<PINB3);
 242:	2b 98       	cbi	0x05, 3	; 5
 244:	83 ef       	ldi	r24, 0xF3	; 243
 246:	96 e1       	ldi	r25, 0x16	; 22
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <main+0x176>
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	97 e2       	ldi	r25, 0x27	; 39
 250:	e9 e1       	ldi	r30, 0x19	; 25
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <main+0x182>
 258:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25a:	d1 f7       	brne	.-12     	; 0x250 <main+0x17e>
				_delay_us(25000-1500);
				
				_delay_ms(1000);
				
				PORTB |= (1<<PINB3);
 25c:	2b 9a       	sbi	0x05, 3	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 25e:	86 ea       	ldi	r24, 0xA6	; 166
 260:	8a 95       	dec	r24
 262:	f1 f7       	brne	.-4      	; 0x260 <main+0x18e>
				_delay_us(500);
				PORTB &= ~(1<<PINB3);
 264:	2b 98       	cbi	0x05, 3	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 266:	88 e8       	ldi	r24, 0x88	; 136
 268:	93 e1       	ldi	r25, 0x13	; 19
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <main+0x198>
 26e:	5b cf       	rjmp	.-330    	; 0x126 <main+0x54>
				_delay_us(20000);
				break;	
			}
			case(0b01010111):					//CAPITAL W IS PRESSED 
			{
				PORTB |= (1<<PINB4);			//VERTICAL CONTROLLER 2 IS CONNECTED TO PIN-B4
 270:	2c 9a       	sbi	0x05, 4	; 5
				_delay_us(ud2);
 272:	b5 01       	movw	r22, r10
 274:	0b 2c       	mov	r0, r11
 276:	00 0c       	add	r0, r0
 278:	88 0b       	sbc	r24, r24
 27a:	99 0b       	sbc	r25, r25
 27c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatsisf>
 280:	6b 01       	movw	r12, r22
 282:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 284:	2b ea       	ldi	r18, 0xAB	; 171
 286:	3a ea       	ldi	r19, 0xAA	; 170
 288:	4a ea       	ldi	r20, 0xAA	; 170
 28a:	5e e3       	ldi	r21, 0x3E	; 62
 28c:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 290:	69 83       	std	Y+1, r22	; 0x01
 292:	7a 83       	std	Y+2, r23	; 0x02
 294:	8b 83       	std	Y+3, r24	; 0x03
 296:	9c 83       	std	Y+4, r25	; 0x04
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e8       	ldi	r20, 0x80	; 128
 29e:	5f e3       	ldi	r21, 0x3F	; 63
 2a0:	0e 94 ba 03 	call	0x774	; 0x774 <__cmpsf2>
 2a4:	88 23       	and	r24, r24
 2a6:	0c f4       	brge	.+2      	; 0x2aa <main+0x1d8>
 2a8:	7b c0       	rjmp	.+246    	; 0x3a0 <main+0x2ce>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e8       	ldi	r20, 0x80	; 128
 2b0:	5e e3       	ldi	r21, 0x3E	; 62
 2b2:	c7 01       	movw	r24, r14
 2b4:	b6 01       	movw	r22, r12
 2b6:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 2ba:	6d 83       	std	Y+5, r22	; 0x05
 2bc:	7e 83       	std	Y+6, r23	; 0x06
 2be:	8f 83       	std	Y+7, r24	; 0x07
 2c0:	98 87       	std	Y+8, r25	; 0x08
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	3f ef       	ldi	r19, 0xFF	; 255
 2c6:	4f e7       	ldi	r20, 0x7F	; 127
 2c8:	57 e4       	ldi	r21, 0x47	; 71
 2ca:	0e 94 12 05 	call	0xa24	; 0xa24 <__gesf2>
 2ce:	18 16       	cp	r1, r24
 2d0:	0c f0       	brlt	.+2      	; 0x2d4 <main+0x202>
 2d2:	48 c0       	rjmp	.+144    	; 0x364 <main+0x292>
	{
		_delay_ms(__us / 1000.0);
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	4a e7       	ldi	r20, 0x7A	; 122
 2da:	54 e4       	ldi	r21, 0x44	; 68
 2dc:	c7 01       	movw	r24, r14
 2de:	b6 01       	movw	r22, r12
 2e0:	0e 94 bf 03 	call	0x77e	; 0x77e <__divsf3>
 2e4:	69 83       	std	Y+1, r22	; 0x01
 2e6:	7a 83       	std	Y+2, r23	; 0x02
 2e8:	8b 83       	std	Y+3, r24	; 0x03
 2ea:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	4a e7       	ldi	r20, 0x7A	; 122
 2f2:	53 e4       	ldi	r21, 0x43	; 67
 2f4:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 2f8:	6b 01       	movw	r12, r22
 2fa:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e8       	ldi	r20, 0x80	; 128
 302:	5f e3       	ldi	r21, 0x3F	; 63
 304:	0e 94 ba 03 	call	0x774	; 0x774 <__cmpsf2>
 308:	88 23       	and	r24, r24
 30a:	34 f1       	brlt	.+76     	; 0x358 <main+0x286>
		__ticks = 1;
	else if (__tmp > 65535)
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	3f ef       	ldi	r19, 0xFF	; 255
 310:	4f e7       	ldi	r20, 0x7F	; 127
 312:	57 e4       	ldi	r21, 0x47	; 71
 314:	c7 01       	movw	r24, r14
 316:	b6 01       	movw	r22, r12
 318:	0e 94 12 05 	call	0xa24	; 0xa24 <__gesf2>
 31c:	18 16       	cp	r1, r24
 31e:	bc f4       	brge	.+46     	; 0x34e <main+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	40 e2       	ldi	r20, 0x20	; 32
 326:	51 e4       	ldi	r21, 0x41	; 65
 328:	69 81       	ldd	r22, Y+1	; 0x01
 32a:	7a 81       	ldd	r23, Y+2	; 0x02
 32c:	8b 81       	ldd	r24, Y+3	; 0x03
 32e:	9c 81       	ldd	r25, Y+4	; 0x04
 330:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 334:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
		while(__ticks)
 338:	61 15       	cp	r22, r1
 33a:	71 05       	cpc	r23, r1
 33c:	99 f1       	breq	.+102    	; 0x3a4 <main+0x2d2>
 33e:	89 e1       	ldi	r24, 0x19	; 25
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <main+0x270>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 346:	61 50       	subi	r22, 0x01	; 1
 348:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 34a:	c9 f7       	brne	.-14     	; 0x33e <main+0x26c>
 34c:	2b c0       	rjmp	.+86     	; 0x3a4 <main+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 34e:	c7 01       	movw	r24, r14
 350:	b6 01       	movw	r22, r12
 352:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 356:	02 c0       	rjmp	.+4      	; 0x35c <main+0x28a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	cb 01       	movw	r24, r22
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <main+0x28c>
 362:	20 c0       	rjmp	.+64     	; 0x3a4 <main+0x2d2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	4f e7       	ldi	r20, 0x7F	; 127
 36a:	53 e4       	ldi	r21, 0x43	; 67
 36c:	69 81       	ldd	r22, Y+1	; 0x01
 36e:	7a 81       	ldd	r23, Y+2	; 0x02
 370:	8b 81       	ldd	r24, Y+3	; 0x03
 372:	9c 81       	ldd	r25, Y+4	; 0x04
 374:	0e 94 12 05 	call	0xa24	; 0xa24 <__gesf2>
 378:	18 16       	cp	r1, r24
 37a:	54 f4       	brge	.+20     	; 0x390 <main+0x2be>
 37c:	6d 81       	ldd	r22, Y+5	; 0x05
 37e:	7e 81       	ldd	r23, Y+6	; 0x06
 380:	8f 81       	ldd	r24, Y+7	; 0x07
 382:	98 85       	ldd	r25, Y+8	; 0x08
 384:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 388:	cb 01       	movw	r24, r22
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <main+0x2b8>
 38e:	0d c0       	rjmp	.+26     	; 0x3aa <main+0x2d8>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 390:	69 81       	ldd	r22, Y+1	; 0x01
 392:	7a 81       	ldd	r23, Y+2	; 0x02
 394:	8b 81       	ldd	r24, Y+3	; 0x03
 396:	9c 81       	ldd	r25, Y+4	; 0x04
 398:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 39c:	86 2e       	mov	r8, r22
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <main+0x2d2>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 3a0:	88 24       	eor	r8, r8
 3a2:	83 94       	inc	r8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3a4:	88 2d       	mov	r24, r8
 3a6:	8a 95       	dec	r24
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <main+0x2d4>
				PORTB &= ~(1<<PINB4);
 3aa:	2c 98       	cbi	0x05, 4	; 5
				_delay_us(25000-ud2);
 3ac:	b3 01       	movw	r22, r6
 3ae:	6a 19       	sub	r22, r10
 3b0:	7b 09       	sbc	r23, r11
 3b2:	07 2e       	mov	r0, r23
 3b4:	00 0c       	add	r0, r0
 3b6:	88 0b       	sbc	r24, r24
 3b8:	99 0b       	sbc	r25, r25
 3ba:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatsisf>
 3be:	6b 01       	movw	r12, r22
 3c0:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 3c2:	2b ea       	ldi	r18, 0xAB	; 171
 3c4:	3a ea       	ldi	r19, 0xAA	; 170
 3c6:	4a ea       	ldi	r20, 0xAA	; 170
 3c8:	5e e3       	ldi	r21, 0x3E	; 62
 3ca:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 3ce:	69 83       	std	Y+1, r22	; 0x01
 3d0:	7a 83       	std	Y+2, r23	; 0x02
 3d2:	8b 83       	std	Y+3, r24	; 0x03
 3d4:	9c 83       	std	Y+4, r25	; 0x04
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	40 e8       	ldi	r20, 0x80	; 128
 3dc:	5f e3       	ldi	r21, 0x3F	; 63
 3de:	0e 94 ba 03 	call	0x774	; 0x774 <__cmpsf2>
 3e2:	88 23       	and	r24, r24
 3e4:	0c f4       	brge	.+2      	; 0x3e8 <main+0x316>
 3e6:	7b c0       	rjmp	.+246    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	40 e8       	ldi	r20, 0x80	; 128
 3ee:	5e e3       	ldi	r21, 0x3E	; 62
 3f0:	c7 01       	movw	r24, r14
 3f2:	b6 01       	movw	r22, r12
 3f4:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 3f8:	6d 83       	std	Y+5, r22	; 0x05
 3fa:	7e 83       	std	Y+6, r23	; 0x06
 3fc:	8f 83       	std	Y+7, r24	; 0x07
 3fe:	98 87       	std	Y+8, r25	; 0x08
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	3f ef       	ldi	r19, 0xFF	; 255
 404:	4f e7       	ldi	r20, 0x7F	; 127
 406:	57 e4       	ldi	r21, 0x47	; 71
 408:	0e 94 12 05 	call	0xa24	; 0xa24 <__gesf2>
 40c:	18 16       	cp	r1, r24
 40e:	0c f0       	brlt	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	48 c0       	rjmp	.+144    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	{
		_delay_ms(__us / 1000.0);
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	4a e7       	ldi	r20, 0x7A	; 122
 418:	54 e4       	ldi	r21, 0x44	; 68
 41a:	c7 01       	movw	r24, r14
 41c:	b6 01       	movw	r22, r12
 41e:	0e 94 bf 03 	call	0x77e	; 0x77e <__divsf3>
 422:	69 83       	std	Y+1, r22	; 0x01
 424:	7a 83       	std	Y+2, r23	; 0x02
 426:	8b 83       	std	Y+3, r24	; 0x03
 428:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	4a e7       	ldi	r20, 0x7A	; 122
 430:	53 e4       	ldi	r21, 0x43	; 67
 432:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 436:	6b 01       	movw	r12, r22
 438:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 43a:	20 e0       	ldi	r18, 0x00	; 0
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	40 e8       	ldi	r20, 0x80	; 128
 440:	5f e3       	ldi	r21, 0x3F	; 63
 442:	0e 94 ba 03 	call	0x774	; 0x774 <__cmpsf2>
 446:	88 23       	and	r24, r24
 448:	34 f1       	brlt	.+76     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		__ticks = 1;
	else if (__tmp > 65535)
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	3f ef       	ldi	r19, 0xFF	; 255
 44e:	4f e7       	ldi	r20, 0x7F	; 127
 450:	57 e4       	ldi	r21, 0x47	; 71
 452:	c7 01       	movw	r24, r14
 454:	b6 01       	movw	r22, r12
 456:	0e 94 12 05 	call	0xa24	; 0xa24 <__gesf2>
 45a:	18 16       	cp	r1, r24
 45c:	bc f4       	brge	.+46     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	40 e2       	ldi	r20, 0x20	; 32
 464:	51 e4       	ldi	r21, 0x41	; 65
 466:	69 81       	ldd	r22, Y+1	; 0x01
 468:	7a 81       	ldd	r23, Y+2	; 0x02
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	9c 81       	ldd	r25, Y+4	; 0x04
 46e:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 472:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
		while(__ticks)
 476:	61 15       	cp	r22, r1
 478:	71 05       	cpc	r23, r1
 47a:	99 f1       	breq	.+102    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 47c:	89 e1       	ldi	r24, 0x19	; 25
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 484:	61 50       	subi	r22, 0x01	; 1
 486:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 488:	c9 f7       	brne	.-14     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 48a:	2b c0       	rjmp	.+86     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 48c:	c7 01       	movw	r24, r14
 48e:	b6 01       	movw	r22, r12
 490:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 494:	02 c0       	rjmp	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	cb 01       	movw	r24, r22
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a0:	20 c0       	rjmp	.+64     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	4f e7       	ldi	r20, 0x7F	; 127
 4a8:	53 e4       	ldi	r21, 0x43	; 67
 4aa:	69 81       	ldd	r22, Y+1	; 0x01
 4ac:	7a 81       	ldd	r23, Y+2	; 0x02
 4ae:	8b 81       	ldd	r24, Y+3	; 0x03
 4b0:	9c 81       	ldd	r25, Y+4	; 0x04
 4b2:	0e 94 12 05 	call	0xa24	; 0xa24 <__gesf2>
 4b6:	18 16       	cp	r1, r24
 4b8:	54 f4       	brge	.+20     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4ba:	6d 81       	ldd	r22, Y+5	; 0x05
 4bc:	7e 81       	ldd	r23, Y+6	; 0x06
 4be:	8f 81       	ldd	r24, Y+7	; 0x07
 4c0:	98 85       	ldd	r25, Y+8	; 0x08
 4c2:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 4c6:	cb 01       	movw	r24, r22
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4cc:	0d c0       	rjmp	.+26     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 4ce:	69 81       	ldd	r22, Y+1	; 0x01
 4d0:	7a 81       	ldd	r23, Y+2	; 0x02
 4d2:	8b 81       	ldd	r24, Y+3	; 0x03
 4d4:	9c 81       	ldd	r25, Y+4	; 0x04
 4d6:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 4da:	96 2e       	mov	r9, r22
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 4de:	99 24       	eor	r9, r9
 4e0:	93 94       	inc	r9
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4e2:	89 2d       	mov	r24, r9
 4e4:	8a 95       	dec	r24
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
				ud2+=10;
 4e8:	fa e0       	ldi	r31, 0x0A	; 10
 4ea:	af 0e       	add	r10, r31
 4ec:	b1 1c       	adc	r11, r1
				break;
 4ee:	1b ce       	rjmp	.-970    	; 0x126 <main+0x54>
			}
			case(0b01010011):					//CAPITAL S IS PRESSED
			{
				PORTB |= (1<<PINB4);			
 4f0:	2c 9a       	sbi	0x05, 4	; 5
				_delay_us(ud2);
 4f2:	b5 01       	movw	r22, r10
 4f4:	0b 2c       	mov	r0, r11
 4f6:	00 0c       	add	r0, r0
 4f8:	88 0b       	sbc	r24, r24
 4fa:	99 0b       	sbc	r25, r25
 4fc:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatsisf>
 500:	6b 01       	movw	r12, r22
 502:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 504:	2b ea       	ldi	r18, 0xAB	; 171
 506:	3a ea       	ldi	r19, 0xAA	; 170
 508:	4a ea       	ldi	r20, 0xAA	; 170
 50a:	5e e3       	ldi	r21, 0x3E	; 62
 50c:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 510:	69 83       	std	Y+1, r22	; 0x01
 512:	7a 83       	std	Y+2, r23	; 0x02
 514:	8b 83       	std	Y+3, r24	; 0x03
 516:	9c 83       	std	Y+4, r25	; 0x04
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	40 e8       	ldi	r20, 0x80	; 128
 51e:	5f e3       	ldi	r21, 0x3F	; 63
 520:	0e 94 ba 03 	call	0x774	; 0x774 <__cmpsf2>
 524:	88 23       	and	r24, r24
 526:	0c f4       	brge	.+2      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 528:	7b c0       	rjmp	.+246    	; 0x620 <__LOCK_REGION_LENGTH__+0x220>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 52a:	20 e0       	ldi	r18, 0x00	; 0
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	40 e8       	ldi	r20, 0x80	; 128
 530:	5e e3       	ldi	r21, 0x3E	; 62
 532:	c7 01       	movw	r24, r14
 534:	b6 01       	movw	r22, r12
 536:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 53a:	6d 83       	std	Y+5, r22	; 0x05
 53c:	7e 83       	std	Y+6, r23	; 0x06
 53e:	8f 83       	std	Y+7, r24	; 0x07
 540:	98 87       	std	Y+8, r25	; 0x08
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	3f ef       	ldi	r19, 0xFF	; 255
 546:	4f e7       	ldi	r20, 0x7F	; 127
 548:	57 e4       	ldi	r21, 0x47	; 71
 54a:	0e 94 12 05 	call	0xa24	; 0xa24 <__gesf2>
 54e:	18 16       	cp	r1, r24
 550:	0c f0       	brlt	.+2      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 552:	48 c0       	rjmp	.+144    	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
	{
		_delay_ms(__us / 1000.0);
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	4a e7       	ldi	r20, 0x7A	; 122
 55a:	54 e4       	ldi	r21, 0x44	; 68
 55c:	c7 01       	movw	r24, r14
 55e:	b6 01       	movw	r22, r12
 560:	0e 94 bf 03 	call	0x77e	; 0x77e <__divsf3>
 564:	69 83       	std	Y+1, r22	; 0x01
 566:	7a 83       	std	Y+2, r23	; 0x02
 568:	8b 83       	std	Y+3, r24	; 0x03
 56a:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	4a e7       	ldi	r20, 0x7A	; 122
 572:	53 e4       	ldi	r21, 0x43	; 67
 574:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 578:	6b 01       	movw	r12, r22
 57a:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	40 e8       	ldi	r20, 0x80	; 128
 582:	5f e3       	ldi	r21, 0x3F	; 63
 584:	0e 94 ba 03 	call	0x774	; 0x774 <__cmpsf2>
 588:	88 23       	and	r24, r24
 58a:	34 f1       	brlt	.+76     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
		__ticks = 1;
	else if (__tmp > 65535)
 58c:	20 e0       	ldi	r18, 0x00	; 0
 58e:	3f ef       	ldi	r19, 0xFF	; 255
 590:	4f e7       	ldi	r20, 0x7F	; 127
 592:	57 e4       	ldi	r21, 0x47	; 71
 594:	c7 01       	movw	r24, r14
 596:	b6 01       	movw	r22, r12
 598:	0e 94 12 05 	call	0xa24	; 0xa24 <__gesf2>
 59c:	18 16       	cp	r1, r24
 59e:	bc f4       	brge	.+46     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5a0:	20 e0       	ldi	r18, 0x00	; 0
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	40 e2       	ldi	r20, 0x20	; 32
 5a6:	51 e4       	ldi	r21, 0x41	; 65
 5a8:	69 81       	ldd	r22, Y+1	; 0x01
 5aa:	7a 81       	ldd	r23, Y+2	; 0x02
 5ac:	8b 81       	ldd	r24, Y+3	; 0x03
 5ae:	9c 81       	ldd	r25, Y+4	; 0x04
 5b0:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 5b4:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
		while(__ticks)
 5b8:	61 15       	cp	r22, r1
 5ba:	71 05       	cpc	r23, r1
 5bc:	99 f1       	breq	.+102    	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5be:	89 e1       	ldi	r24, 0x19	; 25
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5c6:	61 50       	subi	r22, 0x01	; 1
 5c8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5ca:	c9 f7       	brne	.-14     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5cc:	2b c0       	rjmp	.+86     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5ce:	c7 01       	movw	r24, r14
 5d0:	b6 01       	movw	r22, r12
 5d2:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	cb 01       	movw	r24, r22
 5de:	01 97       	sbiw	r24, 0x01	; 1
 5e0:	f1 f7       	brne	.-4      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5e2:	20 c0       	rjmp	.+64     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	4f e7       	ldi	r20, 0x7F	; 127
 5ea:	53 e4       	ldi	r21, 0x43	; 67
 5ec:	69 81       	ldd	r22, Y+1	; 0x01
 5ee:	7a 81       	ldd	r23, Y+2	; 0x02
 5f0:	8b 81       	ldd	r24, Y+3	; 0x03
 5f2:	9c 81       	ldd	r25, Y+4	; 0x04
 5f4:	0e 94 12 05 	call	0xa24	; 0xa24 <__gesf2>
 5f8:	18 16       	cp	r1, r24
 5fa:	54 f4       	brge	.+20     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5fc:	6d 81       	ldd	r22, Y+5	; 0x05
 5fe:	7e 81       	ldd	r23, Y+6	; 0x06
 600:	8f 81       	ldd	r24, Y+7	; 0x07
 602:	98 85       	ldd	r25, Y+8	; 0x08
 604:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 608:	cb 01       	movw	r24, r22
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 60e:	0d c0       	rjmp	.+26     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 610:	69 81       	ldd	r22, Y+1	; 0x01
 612:	7a 81       	ldd	r23, Y+2	; 0x02
 614:	8b 81       	ldd	r24, Y+3	; 0x03
 616:	9c 81       	ldd	r25, Y+4	; 0x04
 618:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 61c:	6a 87       	std	Y+10, r22	; 0x0a
 61e:	02 c0       	rjmp	.+4      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	8a 87       	std	Y+10, r24	; 0x0a
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 624:	8a 85       	ldd	r24, Y+10	; 0x0a
 626:	8a 95       	dec	r24
 628:	f1 f7       	brne	.-4      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
				PORTB &= ~(1<<PINB4);
 62a:	2c 98       	cbi	0x05, 4	; 5
				_delay_us(25000-ud2);
 62c:	b3 01       	movw	r22, r6
 62e:	6a 19       	sub	r22, r10
 630:	7b 09       	sbc	r23, r11
 632:	07 2e       	mov	r0, r23
 634:	00 0c       	add	r0, r0
 636:	88 0b       	sbc	r24, r24
 638:	99 0b       	sbc	r25, r25
 63a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatsisf>
 63e:	6b 01       	movw	r12, r22
 640:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 642:	2b ea       	ldi	r18, 0xAB	; 171
 644:	3a ea       	ldi	r19, 0xAA	; 170
 646:	4a ea       	ldi	r20, 0xAA	; 170
 648:	5e e3       	ldi	r21, 0x3E	; 62
 64a:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 64e:	69 83       	std	Y+1, r22	; 0x01
 650:	7a 83       	std	Y+2, r23	; 0x02
 652:	8b 83       	std	Y+3, r24	; 0x03
 654:	9c 83       	std	Y+4, r25	; 0x04
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	40 e8       	ldi	r20, 0x80	; 128
 65c:	5f e3       	ldi	r21, 0x3F	; 63
 65e:	0e 94 ba 03 	call	0x774	; 0x774 <__cmpsf2>
 662:	88 23       	and	r24, r24
 664:	0c f4       	brge	.+2      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 666:	7b c0       	rjmp	.+246    	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	40 e8       	ldi	r20, 0x80	; 128
 66e:	5e e3       	ldi	r21, 0x3E	; 62
 670:	c7 01       	movw	r24, r14
 672:	b6 01       	movw	r22, r12
 674:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 678:	6d 83       	std	Y+5, r22	; 0x05
 67a:	7e 83       	std	Y+6, r23	; 0x06
 67c:	8f 83       	std	Y+7, r24	; 0x07
 67e:	98 87       	std	Y+8, r25	; 0x08
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 680:	20 e0       	ldi	r18, 0x00	; 0
 682:	3f ef       	ldi	r19, 0xFF	; 255
 684:	4f e7       	ldi	r20, 0x7F	; 127
 686:	57 e4       	ldi	r21, 0x47	; 71
 688:	0e 94 12 05 	call	0xa24	; 0xa24 <__gesf2>
 68c:	18 16       	cp	r1, r24
 68e:	0c f0       	brlt	.+2      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 690:	48 c0       	rjmp	.+144    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
	{
		_delay_ms(__us / 1000.0);
 692:	20 e0       	ldi	r18, 0x00	; 0
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	4a e7       	ldi	r20, 0x7A	; 122
 698:	54 e4       	ldi	r21, 0x44	; 68
 69a:	c7 01       	movw	r24, r14
 69c:	b6 01       	movw	r22, r12
 69e:	0e 94 bf 03 	call	0x77e	; 0x77e <__divsf3>
 6a2:	69 83       	std	Y+1, r22	; 0x01
 6a4:	7a 83       	std	Y+2, r23	; 0x02
 6a6:	8b 83       	std	Y+3, r24	; 0x03
 6a8:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 6aa:	20 e0       	ldi	r18, 0x00	; 0
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	4a e7       	ldi	r20, 0x7A	; 122
 6b0:	53 e4       	ldi	r21, 0x43	; 67
 6b2:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 6b6:	6b 01       	movw	r12, r22
 6b8:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 6ba:	20 e0       	ldi	r18, 0x00	; 0
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	40 e8       	ldi	r20, 0x80	; 128
 6c0:	5f e3       	ldi	r21, 0x3F	; 63
 6c2:	0e 94 ba 03 	call	0x774	; 0x774 <__cmpsf2>
 6c6:	88 23       	and	r24, r24
 6c8:	34 f1       	brlt	.+76     	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
		__ticks = 1;
	else if (__tmp > 65535)
 6ca:	20 e0       	ldi	r18, 0x00	; 0
 6cc:	3f ef       	ldi	r19, 0xFF	; 255
 6ce:	4f e7       	ldi	r20, 0x7F	; 127
 6d0:	57 e4       	ldi	r21, 0x47	; 71
 6d2:	c7 01       	movw	r24, r14
 6d4:	b6 01       	movw	r22, r12
 6d6:	0e 94 12 05 	call	0xa24	; 0xa24 <__gesf2>
 6da:	18 16       	cp	r1, r24
 6dc:	bc f4       	brge	.+46     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6de:	20 e0       	ldi	r18, 0x00	; 0
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	40 e2       	ldi	r20, 0x20	; 32
 6e4:	51 e4       	ldi	r21, 0x41	; 65
 6e6:	69 81       	ldd	r22, Y+1	; 0x01
 6e8:	7a 81       	ldd	r23, Y+2	; 0x02
 6ea:	8b 81       	ldd	r24, Y+3	; 0x03
 6ec:	9c 81       	ldd	r25, Y+4	; 0x04
 6ee:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 6f2:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
		while(__ticks)
 6f6:	61 15       	cp	r22, r1
 6f8:	71 05       	cpc	r23, r1
 6fa:	99 f1       	breq	.+102    	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6fc:	89 e1       	ldi	r24, 0x19	; 25
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	01 97       	sbiw	r24, 0x01	; 1
 702:	f1 f7       	brne	.-4      	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 704:	61 50       	subi	r22, 0x01	; 1
 706:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 708:	c9 f7       	brne	.-14     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 70a:	2b c0       	rjmp	.+86     	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 70c:	c7 01       	movw	r24, r14
 70e:	b6 01       	movw	r22, r12
 710:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 714:	02 c0       	rjmp	.+4      	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 716:	61 e0       	ldi	r22, 0x01	; 1
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	cb 01       	movw	r24, r22
 71c:	01 97       	sbiw	r24, 0x01	; 1
 71e:	f1 f7       	brne	.-4      	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 720:	20 c0       	rjmp	.+64     	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 722:	20 e0       	ldi	r18, 0x00	; 0
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	4f e7       	ldi	r20, 0x7F	; 127
 728:	53 e4       	ldi	r21, 0x43	; 67
 72a:	69 81       	ldd	r22, Y+1	; 0x01
 72c:	7a 81       	ldd	r23, Y+2	; 0x02
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	9c 81       	ldd	r25, Y+4	; 0x04
 732:	0e 94 12 05 	call	0xa24	; 0xa24 <__gesf2>
 736:	18 16       	cp	r1, r24
 738:	54 f4       	brge	.+20     	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 73a:	6d 81       	ldd	r22, Y+5	; 0x05
 73c:	7e 81       	ldd	r23, Y+6	; 0x06
 73e:	8f 81       	ldd	r24, Y+7	; 0x07
 740:	98 85       	ldd	r25, Y+8	; 0x08
 742:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 746:	cb 01       	movw	r24, r22
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	f1 f7       	brne	.-4      	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
 74c:	0d c0       	rjmp	.+26     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 74e:	69 81       	ldd	r22, Y+1	; 0x01
 750:	7a 81       	ldd	r23, Y+2	; 0x02
 752:	8b 81       	ldd	r24, Y+3	; 0x03
 754:	9c 81       	ldd	r25, Y+4	; 0x04
 756:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 75a:	69 87       	std	Y+9, r22	; 0x09
 75c:	02 c0       	rjmp	.+4      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 75e:	e1 e0       	ldi	r30, 0x01	; 1
 760:	e9 87       	std	Y+9, r30	; 0x09
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 762:	89 85       	ldd	r24, Y+9	; 0x09
 764:	8a 95       	dec	r24
 766:	f1 f7       	brne	.-4      	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
				ud2-=10;
 768:	fa e0       	ldi	r31, 0x0A	; 10
 76a:	af 1a       	sub	r10, r31
 76c:	b1 08       	sbc	r11, r1
				break;
 76e:	db cc       	rjmp	.-1610   	; 0x126 <main+0x54>
			}
			
			default:
			{
				DDRB = 0x00;
 770:	14 b8       	out	0x04, r1	; 4
				break;
 772:	d9 cc       	rjmp	.-1614   	; 0x126 <main+0x54>

00000774 <__cmpsf2>:
 774:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_cmp>
 778:	08 f4       	brcc	.+2      	; 0x77c <__cmpsf2+0x8>
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	08 95       	ret

0000077e <__divsf3>:
 77e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__divsf3x>
 782:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_round>
 786:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_pscB>
 78a:	58 f0       	brcs	.+22     	; 0x7a2 <__divsf3+0x24>
 78c:	0e 94 ca 04 	call	0x994	; 0x994 <__fp_pscA>
 790:	40 f0       	brcs	.+16     	; 0x7a2 <__divsf3+0x24>
 792:	29 f4       	brne	.+10     	; 0x79e <__divsf3+0x20>
 794:	5f 3f       	cpi	r21, 0xFF	; 255
 796:	29 f0       	breq	.+10     	; 0x7a2 <__divsf3+0x24>
 798:	0c 94 c1 04 	jmp	0x982	; 0x982 <__fp_inf>
 79c:	51 11       	cpse	r21, r1
 79e:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_szero>
 7a2:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_nan>

000007a6 <__divsf3x>:
 7a6:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fp_split3>
 7aa:	68 f3       	brcs	.-38     	; 0x786 <__divsf3+0x8>

000007ac <__divsf3_pse>:
 7ac:	99 23       	and	r25, r25
 7ae:	b1 f3       	breq	.-20     	; 0x79c <__divsf3+0x1e>
 7b0:	55 23       	and	r21, r21
 7b2:	91 f3       	breq	.-28     	; 0x798 <__divsf3+0x1a>
 7b4:	95 1b       	sub	r25, r21
 7b6:	55 0b       	sbc	r21, r21
 7b8:	bb 27       	eor	r27, r27
 7ba:	aa 27       	eor	r26, r26
 7bc:	62 17       	cp	r22, r18
 7be:	73 07       	cpc	r23, r19
 7c0:	84 07       	cpc	r24, r20
 7c2:	38 f0       	brcs	.+14     	; 0x7d2 <__divsf3_pse+0x26>
 7c4:	9f 5f       	subi	r25, 0xFF	; 255
 7c6:	5f 4f       	sbci	r21, 0xFF	; 255
 7c8:	22 0f       	add	r18, r18
 7ca:	33 1f       	adc	r19, r19
 7cc:	44 1f       	adc	r20, r20
 7ce:	aa 1f       	adc	r26, r26
 7d0:	a9 f3       	breq	.-22     	; 0x7bc <__divsf3_pse+0x10>
 7d2:	35 d0       	rcall	.+106    	; 0x83e <__divsf3_pse+0x92>
 7d4:	0e 2e       	mov	r0, r30
 7d6:	3a f0       	brmi	.+14     	; 0x7e6 <__divsf3_pse+0x3a>
 7d8:	e0 e8       	ldi	r30, 0x80	; 128
 7da:	32 d0       	rcall	.+100    	; 0x840 <__divsf3_pse+0x94>
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	e6 95       	lsr	r30
 7e2:	00 1c       	adc	r0, r0
 7e4:	ca f7       	brpl	.-14     	; 0x7d8 <__divsf3_pse+0x2c>
 7e6:	2b d0       	rcall	.+86     	; 0x83e <__divsf3_pse+0x92>
 7e8:	fe 2f       	mov	r31, r30
 7ea:	29 d0       	rcall	.+82     	; 0x83e <__divsf3_pse+0x92>
 7ec:	66 0f       	add	r22, r22
 7ee:	77 1f       	adc	r23, r23
 7f0:	88 1f       	adc	r24, r24
 7f2:	bb 1f       	adc	r27, r27
 7f4:	26 17       	cp	r18, r22
 7f6:	37 07       	cpc	r19, r23
 7f8:	48 07       	cpc	r20, r24
 7fa:	ab 07       	cpc	r26, r27
 7fc:	b0 e8       	ldi	r27, 0x80	; 128
 7fe:	09 f0       	breq	.+2      	; 0x802 <__divsf3_pse+0x56>
 800:	bb 0b       	sbc	r27, r27
 802:	80 2d       	mov	r24, r0
 804:	bf 01       	movw	r22, r30
 806:	ff 27       	eor	r31, r31
 808:	93 58       	subi	r25, 0x83	; 131
 80a:	5f 4f       	sbci	r21, 0xFF	; 255
 80c:	3a f0       	brmi	.+14     	; 0x81c <__divsf3_pse+0x70>
 80e:	9e 3f       	cpi	r25, 0xFE	; 254
 810:	51 05       	cpc	r21, r1
 812:	78 f0       	brcs	.+30     	; 0x832 <__divsf3_pse+0x86>
 814:	0c 94 c1 04 	jmp	0x982	; 0x982 <__fp_inf>
 818:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_szero>
 81c:	5f 3f       	cpi	r21, 0xFF	; 255
 81e:	e4 f3       	brlt	.-8      	; 0x818 <__divsf3_pse+0x6c>
 820:	98 3e       	cpi	r25, 0xE8	; 232
 822:	d4 f3       	brlt	.-12     	; 0x818 <__divsf3_pse+0x6c>
 824:	86 95       	lsr	r24
 826:	77 95       	ror	r23
 828:	67 95       	ror	r22
 82a:	b7 95       	ror	r27
 82c:	f7 95       	ror	r31
 82e:	9f 5f       	subi	r25, 0xFF	; 255
 830:	c9 f7       	brne	.-14     	; 0x824 <__divsf3_pse+0x78>
 832:	88 0f       	add	r24, r24
 834:	91 1d       	adc	r25, r1
 836:	96 95       	lsr	r25
 838:	87 95       	ror	r24
 83a:	97 f9       	bld	r25, 7
 83c:	08 95       	ret
 83e:	e1 e0       	ldi	r30, 0x01	; 1
 840:	66 0f       	add	r22, r22
 842:	77 1f       	adc	r23, r23
 844:	88 1f       	adc	r24, r24
 846:	bb 1f       	adc	r27, r27
 848:	62 17       	cp	r22, r18
 84a:	73 07       	cpc	r23, r19
 84c:	84 07       	cpc	r24, r20
 84e:	ba 07       	cpc	r27, r26
 850:	20 f0       	brcs	.+8      	; 0x85a <__divsf3_pse+0xae>
 852:	62 1b       	sub	r22, r18
 854:	73 0b       	sbc	r23, r19
 856:	84 0b       	sbc	r24, r20
 858:	ba 0b       	sbc	r27, r26
 85a:	ee 1f       	adc	r30, r30
 85c:	88 f7       	brcc	.-30     	; 0x840 <__divsf3_pse+0x94>
 85e:	e0 95       	com	r30
 860:	08 95       	ret

00000862 <__fixunssfsi>:
 862:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__fp_splitA>
 866:	88 f0       	brcs	.+34     	; 0x88a <__fixunssfsi+0x28>
 868:	9f 57       	subi	r25, 0x7F	; 127
 86a:	98 f0       	brcs	.+38     	; 0x892 <__fixunssfsi+0x30>
 86c:	b9 2f       	mov	r27, r25
 86e:	99 27       	eor	r25, r25
 870:	b7 51       	subi	r27, 0x17	; 23
 872:	b0 f0       	brcs	.+44     	; 0x8a0 <__fixunssfsi+0x3e>
 874:	e1 f0       	breq	.+56     	; 0x8ae <__fixunssfsi+0x4c>
 876:	66 0f       	add	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	88 1f       	adc	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	1a f0       	brmi	.+6      	; 0x886 <__fixunssfsi+0x24>
 880:	ba 95       	dec	r27
 882:	c9 f7       	brne	.-14     	; 0x876 <__fixunssfsi+0x14>
 884:	14 c0       	rjmp	.+40     	; 0x8ae <__fixunssfsi+0x4c>
 886:	b1 30       	cpi	r27, 0x01	; 1
 888:	91 f0       	breq	.+36     	; 0x8ae <__fixunssfsi+0x4c>
 88a:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fp_zero>
 88e:	b1 e0       	ldi	r27, 0x01	; 1
 890:	08 95       	ret
 892:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_zero>
 896:	67 2f       	mov	r22, r23
 898:	78 2f       	mov	r23, r24
 89a:	88 27       	eor	r24, r24
 89c:	b8 5f       	subi	r27, 0xF8	; 248
 89e:	39 f0       	breq	.+14     	; 0x8ae <__fixunssfsi+0x4c>
 8a0:	b9 3f       	cpi	r27, 0xF9	; 249
 8a2:	cc f3       	brlt	.-14     	; 0x896 <__fixunssfsi+0x34>
 8a4:	86 95       	lsr	r24
 8a6:	77 95       	ror	r23
 8a8:	67 95       	ror	r22
 8aa:	b3 95       	inc	r27
 8ac:	d9 f7       	brne	.-10     	; 0x8a4 <__fixunssfsi+0x42>
 8ae:	3e f4       	brtc	.+14     	; 0x8be <__fixunssfsi+0x5c>
 8b0:	90 95       	com	r25
 8b2:	80 95       	com	r24
 8b4:	70 95       	com	r23
 8b6:	61 95       	neg	r22
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	8f 4f       	sbci	r24, 0xFF	; 255
 8bc:	9f 4f       	sbci	r25, 0xFF	; 255
 8be:	08 95       	ret

000008c0 <__floatunsisf>:
 8c0:	e8 94       	clt
 8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <__floatsisf+0x12>

000008c4 <__floatsisf>:
 8c4:	97 fb       	bst	r25, 7
 8c6:	3e f4       	brtc	.+14     	; 0x8d6 <__floatsisf+0x12>
 8c8:	90 95       	com	r25
 8ca:	80 95       	com	r24
 8cc:	70 95       	com	r23
 8ce:	61 95       	neg	r22
 8d0:	7f 4f       	sbci	r23, 0xFF	; 255
 8d2:	8f 4f       	sbci	r24, 0xFF	; 255
 8d4:	9f 4f       	sbci	r25, 0xFF	; 255
 8d6:	99 23       	and	r25, r25
 8d8:	a9 f0       	breq	.+42     	; 0x904 <__stack+0x5>
 8da:	f9 2f       	mov	r31, r25
 8dc:	96 e9       	ldi	r25, 0x96	; 150
 8de:	bb 27       	eor	r27, r27
 8e0:	93 95       	inc	r25
 8e2:	f6 95       	lsr	r31
 8e4:	87 95       	ror	r24
 8e6:	77 95       	ror	r23
 8e8:	67 95       	ror	r22
 8ea:	b7 95       	ror	r27
 8ec:	f1 11       	cpse	r31, r1
 8ee:	f8 cf       	rjmp	.-16     	; 0x8e0 <__floatsisf+0x1c>
 8f0:	fa f4       	brpl	.+62     	; 0x930 <__stack+0x31>
 8f2:	bb 0f       	add	r27, r27
 8f4:	11 f4       	brne	.+4      	; 0x8fa <__floatsisf+0x36>
 8f6:	60 ff       	sbrs	r22, 0
 8f8:	1b c0       	rjmp	.+54     	; 0x930 <__stack+0x31>
 8fa:	6f 5f       	subi	r22, 0xFF	; 255
 8fc:	7f 4f       	sbci	r23, 0xFF	; 255
 8fe:	8f 4f       	sbci	r24, 0xFF	; 255
 900:	9f 4f       	sbci	r25, 0xFF	; 255
 902:	16 c0       	rjmp	.+44     	; 0x930 <__stack+0x31>
 904:	88 23       	and	r24, r24
 906:	11 f0       	breq	.+4      	; 0x90c <__stack+0xd>
 908:	96 e9       	ldi	r25, 0x96	; 150
 90a:	11 c0       	rjmp	.+34     	; 0x92e <__stack+0x2f>
 90c:	77 23       	and	r23, r23
 90e:	21 f0       	breq	.+8      	; 0x918 <__stack+0x19>
 910:	9e e8       	ldi	r25, 0x8E	; 142
 912:	87 2f       	mov	r24, r23
 914:	76 2f       	mov	r23, r22
 916:	05 c0       	rjmp	.+10     	; 0x922 <__stack+0x23>
 918:	66 23       	and	r22, r22
 91a:	71 f0       	breq	.+28     	; 0x938 <__stack+0x39>
 91c:	96 e8       	ldi	r25, 0x86	; 134
 91e:	86 2f       	mov	r24, r22
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	60 e0       	ldi	r22, 0x00	; 0
 924:	2a f0       	brmi	.+10     	; 0x930 <__stack+0x31>
 926:	9a 95       	dec	r25
 928:	66 0f       	add	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	da f7       	brpl	.-10     	; 0x926 <__stack+0x27>
 930:	88 0f       	add	r24, r24
 932:	96 95       	lsr	r25
 934:	87 95       	ror	r24
 936:	97 f9       	bld	r25, 7
 938:	08 95       	ret

0000093a <__fp_cmp>:
 93a:	99 0f       	add	r25, r25
 93c:	00 08       	sbc	r0, r0
 93e:	55 0f       	add	r21, r21
 940:	aa 0b       	sbc	r26, r26
 942:	e0 e8       	ldi	r30, 0x80	; 128
 944:	fe ef       	ldi	r31, 0xFE	; 254
 946:	16 16       	cp	r1, r22
 948:	17 06       	cpc	r1, r23
 94a:	e8 07       	cpc	r30, r24
 94c:	f9 07       	cpc	r31, r25
 94e:	c0 f0       	brcs	.+48     	; 0x980 <__fp_cmp+0x46>
 950:	12 16       	cp	r1, r18
 952:	13 06       	cpc	r1, r19
 954:	e4 07       	cpc	r30, r20
 956:	f5 07       	cpc	r31, r21
 958:	98 f0       	brcs	.+38     	; 0x980 <__fp_cmp+0x46>
 95a:	62 1b       	sub	r22, r18
 95c:	73 0b       	sbc	r23, r19
 95e:	84 0b       	sbc	r24, r20
 960:	95 0b       	sbc	r25, r21
 962:	39 f4       	brne	.+14     	; 0x972 <__fp_cmp+0x38>
 964:	0a 26       	eor	r0, r26
 966:	61 f0       	breq	.+24     	; 0x980 <__fp_cmp+0x46>
 968:	23 2b       	or	r18, r19
 96a:	24 2b       	or	r18, r20
 96c:	25 2b       	or	r18, r21
 96e:	21 f4       	brne	.+8      	; 0x978 <__fp_cmp+0x3e>
 970:	08 95       	ret
 972:	0a 26       	eor	r0, r26
 974:	09 f4       	brne	.+2      	; 0x978 <__fp_cmp+0x3e>
 976:	a1 40       	sbci	r26, 0x01	; 1
 978:	a6 95       	lsr	r26
 97a:	8f ef       	ldi	r24, 0xFF	; 255
 97c:	81 1d       	adc	r24, r1
 97e:	81 1d       	adc	r24, r1
 980:	08 95       	ret

00000982 <__fp_inf>:
 982:	97 f9       	bld	r25, 7
 984:	9f 67       	ori	r25, 0x7F	; 127
 986:	80 e8       	ldi	r24, 0x80	; 128
 988:	70 e0       	ldi	r23, 0x00	; 0
 98a:	60 e0       	ldi	r22, 0x00	; 0
 98c:	08 95       	ret

0000098e <__fp_nan>:
 98e:	9f ef       	ldi	r25, 0xFF	; 255
 990:	80 ec       	ldi	r24, 0xC0	; 192
 992:	08 95       	ret

00000994 <__fp_pscA>:
 994:	00 24       	eor	r0, r0
 996:	0a 94       	dec	r0
 998:	16 16       	cp	r1, r22
 99a:	17 06       	cpc	r1, r23
 99c:	18 06       	cpc	r1, r24
 99e:	09 06       	cpc	r0, r25
 9a0:	08 95       	ret

000009a2 <__fp_pscB>:
 9a2:	00 24       	eor	r0, r0
 9a4:	0a 94       	dec	r0
 9a6:	12 16       	cp	r1, r18
 9a8:	13 06       	cpc	r1, r19
 9aa:	14 06       	cpc	r1, r20
 9ac:	05 06       	cpc	r0, r21
 9ae:	08 95       	ret

000009b0 <__fp_round>:
 9b0:	09 2e       	mov	r0, r25
 9b2:	03 94       	inc	r0
 9b4:	00 0c       	add	r0, r0
 9b6:	11 f4       	brne	.+4      	; 0x9bc <__fp_round+0xc>
 9b8:	88 23       	and	r24, r24
 9ba:	52 f0       	brmi	.+20     	; 0x9d0 <__fp_round+0x20>
 9bc:	bb 0f       	add	r27, r27
 9be:	40 f4       	brcc	.+16     	; 0x9d0 <__fp_round+0x20>
 9c0:	bf 2b       	or	r27, r31
 9c2:	11 f4       	brne	.+4      	; 0x9c8 <__fp_round+0x18>
 9c4:	60 ff       	sbrs	r22, 0
 9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <__fp_round+0x20>
 9c8:	6f 5f       	subi	r22, 0xFF	; 255
 9ca:	7f 4f       	sbci	r23, 0xFF	; 255
 9cc:	8f 4f       	sbci	r24, 0xFF	; 255
 9ce:	9f 4f       	sbci	r25, 0xFF	; 255
 9d0:	08 95       	ret

000009d2 <__fp_split3>:
 9d2:	57 fd       	sbrc	r21, 7
 9d4:	90 58       	subi	r25, 0x80	; 128
 9d6:	44 0f       	add	r20, r20
 9d8:	55 1f       	adc	r21, r21
 9da:	59 f0       	breq	.+22     	; 0x9f2 <__fp_splitA+0x10>
 9dc:	5f 3f       	cpi	r21, 0xFF	; 255
 9de:	71 f0       	breq	.+28     	; 0x9fc <__fp_splitA+0x1a>
 9e0:	47 95       	ror	r20

000009e2 <__fp_splitA>:
 9e2:	88 0f       	add	r24, r24
 9e4:	97 fb       	bst	r25, 7
 9e6:	99 1f       	adc	r25, r25
 9e8:	61 f0       	breq	.+24     	; 0xa02 <__fp_splitA+0x20>
 9ea:	9f 3f       	cpi	r25, 0xFF	; 255
 9ec:	79 f0       	breq	.+30     	; 0xa0c <__fp_splitA+0x2a>
 9ee:	87 95       	ror	r24
 9f0:	08 95       	ret
 9f2:	12 16       	cp	r1, r18
 9f4:	13 06       	cpc	r1, r19
 9f6:	14 06       	cpc	r1, r20
 9f8:	55 1f       	adc	r21, r21
 9fa:	f2 cf       	rjmp	.-28     	; 0x9e0 <__fp_split3+0xe>
 9fc:	46 95       	lsr	r20
 9fe:	f1 df       	rcall	.-30     	; 0x9e2 <__fp_splitA>
 a00:	08 c0       	rjmp	.+16     	; 0xa12 <__fp_splitA+0x30>
 a02:	16 16       	cp	r1, r22
 a04:	17 06       	cpc	r1, r23
 a06:	18 06       	cpc	r1, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	f1 cf       	rjmp	.-30     	; 0x9ee <__fp_splitA+0xc>
 a0c:	86 95       	lsr	r24
 a0e:	71 05       	cpc	r23, r1
 a10:	61 05       	cpc	r22, r1
 a12:	08 94       	sec
 a14:	08 95       	ret

00000a16 <__fp_zero>:
 a16:	e8 94       	clt

00000a18 <__fp_szero>:
 a18:	bb 27       	eor	r27, r27
 a1a:	66 27       	eor	r22, r22
 a1c:	77 27       	eor	r23, r23
 a1e:	cb 01       	movw	r24, r22
 a20:	97 f9       	bld	r25, 7
 a22:	08 95       	ret

00000a24 <__gesf2>:
 a24:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_cmp>
 a28:	08 f4       	brcc	.+2      	; 0xa2c <__gesf2+0x8>
 a2a:	8f ef       	ldi	r24, 0xFF	; 255
 a2c:	08 95       	ret

00000a2e <__mulsf3>:
 a2e:	0e 94 2a 05 	call	0xa54	; 0xa54 <__mulsf3x>
 a32:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_round>
 a36:	0e 94 ca 04 	call	0x994	; 0x994 <__fp_pscA>
 a3a:	38 f0       	brcs	.+14     	; 0xa4a <__mulsf3+0x1c>
 a3c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_pscB>
 a40:	20 f0       	brcs	.+8      	; 0xa4a <__mulsf3+0x1c>
 a42:	95 23       	and	r25, r21
 a44:	11 f0       	breq	.+4      	; 0xa4a <__mulsf3+0x1c>
 a46:	0c 94 c1 04 	jmp	0x982	; 0x982 <__fp_inf>
 a4a:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_nan>
 a4e:	11 24       	eor	r1, r1
 a50:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_szero>

00000a54 <__mulsf3x>:
 a54:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fp_split3>
 a58:	70 f3       	brcs	.-36     	; 0xa36 <__mulsf3+0x8>

00000a5a <__mulsf3_pse>:
 a5a:	95 9f       	mul	r25, r21
 a5c:	c1 f3       	breq	.-16     	; 0xa4e <__mulsf3+0x20>
 a5e:	95 0f       	add	r25, r21
 a60:	50 e0       	ldi	r21, 0x00	; 0
 a62:	55 1f       	adc	r21, r21
 a64:	62 9f       	mul	r22, r18
 a66:	f0 01       	movw	r30, r0
 a68:	72 9f       	mul	r23, r18
 a6a:	bb 27       	eor	r27, r27
 a6c:	f0 0d       	add	r31, r0
 a6e:	b1 1d       	adc	r27, r1
 a70:	63 9f       	mul	r22, r19
 a72:	aa 27       	eor	r26, r26
 a74:	f0 0d       	add	r31, r0
 a76:	b1 1d       	adc	r27, r1
 a78:	aa 1f       	adc	r26, r26
 a7a:	64 9f       	mul	r22, r20
 a7c:	66 27       	eor	r22, r22
 a7e:	b0 0d       	add	r27, r0
 a80:	a1 1d       	adc	r26, r1
 a82:	66 1f       	adc	r22, r22
 a84:	82 9f       	mul	r24, r18
 a86:	22 27       	eor	r18, r18
 a88:	b0 0d       	add	r27, r0
 a8a:	a1 1d       	adc	r26, r1
 a8c:	62 1f       	adc	r22, r18
 a8e:	73 9f       	mul	r23, r19
 a90:	b0 0d       	add	r27, r0
 a92:	a1 1d       	adc	r26, r1
 a94:	62 1f       	adc	r22, r18
 a96:	83 9f       	mul	r24, r19
 a98:	a0 0d       	add	r26, r0
 a9a:	61 1d       	adc	r22, r1
 a9c:	22 1f       	adc	r18, r18
 a9e:	74 9f       	mul	r23, r20
 aa0:	33 27       	eor	r19, r19
 aa2:	a0 0d       	add	r26, r0
 aa4:	61 1d       	adc	r22, r1
 aa6:	23 1f       	adc	r18, r19
 aa8:	84 9f       	mul	r24, r20
 aaa:	60 0d       	add	r22, r0
 aac:	21 1d       	adc	r18, r1
 aae:	82 2f       	mov	r24, r18
 ab0:	76 2f       	mov	r23, r22
 ab2:	6a 2f       	mov	r22, r26
 ab4:	11 24       	eor	r1, r1
 ab6:	9f 57       	subi	r25, 0x7F	; 127
 ab8:	50 40       	sbci	r21, 0x00	; 0
 aba:	9a f0       	brmi	.+38     	; 0xae2 <__mulsf3_pse+0x88>
 abc:	f1 f0       	breq	.+60     	; 0xafa <__mulsf3_pse+0xa0>
 abe:	88 23       	and	r24, r24
 ac0:	4a f0       	brmi	.+18     	; 0xad4 <__mulsf3_pse+0x7a>
 ac2:	ee 0f       	add	r30, r30
 ac4:	ff 1f       	adc	r31, r31
 ac6:	bb 1f       	adc	r27, r27
 ac8:	66 1f       	adc	r22, r22
 aca:	77 1f       	adc	r23, r23
 acc:	88 1f       	adc	r24, r24
 ace:	91 50       	subi	r25, 0x01	; 1
 ad0:	50 40       	sbci	r21, 0x00	; 0
 ad2:	a9 f7       	brne	.-22     	; 0xabe <__mulsf3_pse+0x64>
 ad4:	9e 3f       	cpi	r25, 0xFE	; 254
 ad6:	51 05       	cpc	r21, r1
 ad8:	80 f0       	brcs	.+32     	; 0xafa <__mulsf3_pse+0xa0>
 ada:	0c 94 c1 04 	jmp	0x982	; 0x982 <__fp_inf>
 ade:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_szero>
 ae2:	5f 3f       	cpi	r21, 0xFF	; 255
 ae4:	e4 f3       	brlt	.-8      	; 0xade <__mulsf3_pse+0x84>
 ae6:	98 3e       	cpi	r25, 0xE8	; 232
 ae8:	d4 f3       	brlt	.-12     	; 0xade <__mulsf3_pse+0x84>
 aea:	86 95       	lsr	r24
 aec:	77 95       	ror	r23
 aee:	67 95       	ror	r22
 af0:	b7 95       	ror	r27
 af2:	f7 95       	ror	r31
 af4:	e7 95       	ror	r30
 af6:	9f 5f       	subi	r25, 0xFF	; 255
 af8:	c1 f7       	brne	.-16     	; 0xaea <__mulsf3_pse+0x90>
 afa:	fe 2b       	or	r31, r30
 afc:	88 0f       	add	r24, r24
 afe:	91 1d       	adc	r25, r1
 b00:	96 95       	lsr	r25
 b02:	87 95       	ror	r24
 b04:	97 f9       	bld	r25, 7
 b06:	08 95       	ret

00000b08 <_exit>:
 b08:	f8 94       	cli

00000b0a <__stop_program>:
 b0a:	ff cf       	rjmp	.-2      	; 0xb0a <__stop_program>
